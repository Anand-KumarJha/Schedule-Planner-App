// Generated by view binder compiler. Do not edit!
package com.futuredeveloper.scheduleplanner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.futuredeveloper.scheduleplanner.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MainScheduleRowBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final ImageView delete1;

  @NonNull
  public final ImageView edit1;

  @NonNull
  public final CardView mainScheduleRow;

  @NonNull
  public final RecyclerView recyclerRecyclerView;

  @NonNull
  public final RelativeLayout relative;

  @NonNull
  public final TextView scheduleDate;

  @NonNull
  public final TextView scheduleDay;

  @NonNull
  public final TextView title;

  private MainScheduleRowBinding(@NonNull CardView rootView, @NonNull ImageView delete1,
      @NonNull ImageView edit1, @NonNull CardView mainScheduleRow,
      @NonNull RecyclerView recyclerRecyclerView, @NonNull RelativeLayout relative,
      @NonNull TextView scheduleDate, @NonNull TextView scheduleDay, @NonNull TextView title) {
    this.rootView = rootView;
    this.delete1 = delete1;
    this.edit1 = edit1;
    this.mainScheduleRow = mainScheduleRow;
    this.recyclerRecyclerView = recyclerRecyclerView;
    this.relative = relative;
    this.scheduleDate = scheduleDate;
    this.scheduleDay = scheduleDay;
    this.title = title;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static MainScheduleRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MainScheduleRowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.main_schedule_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MainScheduleRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.delete1;
      ImageView delete1 = ViewBindings.findChildViewById(rootView, id);
      if (delete1 == null) {
        break missingId;
      }

      id = R.id.edit1;
      ImageView edit1 = ViewBindings.findChildViewById(rootView, id);
      if (edit1 == null) {
        break missingId;
      }

      CardView mainScheduleRow = (CardView) rootView;

      id = R.id.recyclerRecyclerView;
      RecyclerView recyclerRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerRecyclerView == null) {
        break missingId;
      }

      id = R.id.relative;
      RelativeLayout relative = ViewBindings.findChildViewById(rootView, id);
      if (relative == null) {
        break missingId;
      }

      id = R.id.schedule_date;
      TextView scheduleDate = ViewBindings.findChildViewById(rootView, id);
      if (scheduleDate == null) {
        break missingId;
      }

      id = R.id.schedule_day;
      TextView scheduleDay = ViewBindings.findChildViewById(rootView, id);
      if (scheduleDay == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      return new MainScheduleRowBinding((CardView) rootView, delete1, edit1, mainScheduleRow,
          recyclerRecyclerView, relative, scheduleDate, scheduleDay, title);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
