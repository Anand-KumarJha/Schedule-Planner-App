// Generated by view binder compiler. Do not edit!
package com.futuredeveloper.scheduleplanner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.futuredeveloper.scheduleplanner.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final FloatingActionButton createIcon;

  @NonNull
  public final ImageView delete;

  @NonNull
  public final ImageView edit;

  @NonNull
  public final RelativeLayout editSchedule;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final RelativeLayout noSchedule;

  @NonNull
  public final RelativeLayout progress;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final EditText quickTask;

  @NonNull
  public final FrameLayout quickTaskBox;

  @NonNull
  public final RecyclerView quickTaskRecycler;

  @NonNull
  public final TextView quickText;

  @NonNull
  public final RecyclerView recyclerHome;

  @NonNull
  public final RecyclerView recyclerHome2;

  @NonNull
  public final FloatingActionButton repeatIcon;

  @NonNull
  public final FrameLayout repeatTaskBox;

  @NonNull
  public final RecyclerView repeatTaskRecycler;

  @NonNull
  public final Button saveQuickTask;

  @NonNull
  public final TextView tasksDone;

  @NonNull
  public final TextView tasksDonePercentage;

  @NonNull
  public final TextView text3;

  @NonNull
  public final TextView text4;

  @NonNull
  public final TextView today;

  @NonNull
  public final FrameLayout todaySet;

  @NonNull
  public final View verticalRow;

  private FragmentHomeBinding(@NonNull RelativeLayout rootView,
      @NonNull FloatingActionButton createIcon, @NonNull ImageView delete, @NonNull ImageView edit,
      @NonNull RelativeLayout editSchedule, @NonNull NestedScrollView nestedScrollView,
      @NonNull RelativeLayout noSchedule, @NonNull RelativeLayout progress,
      @NonNull ProgressBar progressBar, @NonNull EditText quickTask,
      @NonNull FrameLayout quickTaskBox, @NonNull RecyclerView quickTaskRecycler,
      @NonNull TextView quickText, @NonNull RecyclerView recyclerHome,
      @NonNull RecyclerView recyclerHome2, @NonNull FloatingActionButton repeatIcon,
      @NonNull FrameLayout repeatTaskBox, @NonNull RecyclerView repeatTaskRecycler,
      @NonNull Button saveQuickTask, @NonNull TextView tasksDone,
      @NonNull TextView tasksDonePercentage, @NonNull TextView text3, @NonNull TextView text4,
      @NonNull TextView today, @NonNull FrameLayout todaySet, @NonNull View verticalRow) {
    this.rootView = rootView;
    this.createIcon = createIcon;
    this.delete = delete;
    this.edit = edit;
    this.editSchedule = editSchedule;
    this.nestedScrollView = nestedScrollView;
    this.noSchedule = noSchedule;
    this.progress = progress;
    this.progressBar = progressBar;
    this.quickTask = quickTask;
    this.quickTaskBox = quickTaskBox;
    this.quickTaskRecycler = quickTaskRecycler;
    this.quickText = quickText;
    this.recyclerHome = recyclerHome;
    this.recyclerHome2 = recyclerHome2;
    this.repeatIcon = repeatIcon;
    this.repeatTaskBox = repeatTaskBox;
    this.repeatTaskRecycler = repeatTaskRecycler;
    this.saveQuickTask = saveQuickTask;
    this.tasksDone = tasksDone;
    this.tasksDonePercentage = tasksDonePercentage;
    this.text3 = text3;
    this.text4 = text4;
    this.today = today;
    this.todaySet = todaySet;
    this.verticalRow = verticalRow;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.create_icon;
      FloatingActionButton createIcon = ViewBindings.findChildViewById(rootView, id);
      if (createIcon == null) {
        break missingId;
      }

      id = R.id.delete;
      ImageView delete = ViewBindings.findChildViewById(rootView, id);
      if (delete == null) {
        break missingId;
      }

      id = R.id.edit;
      ImageView edit = ViewBindings.findChildViewById(rootView, id);
      if (edit == null) {
        break missingId;
      }

      id = R.id.editSchedule;
      RelativeLayout editSchedule = ViewBindings.findChildViewById(rootView, id);
      if (editSchedule == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.noSchedule;
      RelativeLayout noSchedule = ViewBindings.findChildViewById(rootView, id);
      if (noSchedule == null) {
        break missingId;
      }

      id = R.id.progress;
      RelativeLayout progress = ViewBindings.findChildViewById(rootView, id);
      if (progress == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.quick_task;
      EditText quickTask = ViewBindings.findChildViewById(rootView, id);
      if (quickTask == null) {
        break missingId;
      }

      id = R.id.quick_task_box;
      FrameLayout quickTaskBox = ViewBindings.findChildViewById(rootView, id);
      if (quickTaskBox == null) {
        break missingId;
      }

      id = R.id.quick_task_recycler;
      RecyclerView quickTaskRecycler = ViewBindings.findChildViewById(rootView, id);
      if (quickTaskRecycler == null) {
        break missingId;
      }

      id = R.id.quick_text;
      TextView quickText = ViewBindings.findChildViewById(rootView, id);
      if (quickText == null) {
        break missingId;
      }

      id = R.id.recyclerHome;
      RecyclerView recyclerHome = ViewBindings.findChildViewById(rootView, id);
      if (recyclerHome == null) {
        break missingId;
      }

      id = R.id.recyclerHome2;
      RecyclerView recyclerHome2 = ViewBindings.findChildViewById(rootView, id);
      if (recyclerHome2 == null) {
        break missingId;
      }

      id = R.id.repeat_icon;
      FloatingActionButton repeatIcon = ViewBindings.findChildViewById(rootView, id);
      if (repeatIcon == null) {
        break missingId;
      }

      id = R.id.repeat_task_box;
      FrameLayout repeatTaskBox = ViewBindings.findChildViewById(rootView, id);
      if (repeatTaskBox == null) {
        break missingId;
      }

      id = R.id.repeat_task_recycler;
      RecyclerView repeatTaskRecycler = ViewBindings.findChildViewById(rootView, id);
      if (repeatTaskRecycler == null) {
        break missingId;
      }

      id = R.id.save_quick_task;
      Button saveQuickTask = ViewBindings.findChildViewById(rootView, id);
      if (saveQuickTask == null) {
        break missingId;
      }

      id = R.id.tasksDone;
      TextView tasksDone = ViewBindings.findChildViewById(rootView, id);
      if (tasksDone == null) {
        break missingId;
      }

      id = R.id.tasksDonePercentage;
      TextView tasksDonePercentage = ViewBindings.findChildViewById(rootView, id);
      if (tasksDonePercentage == null) {
        break missingId;
      }

      id = R.id.text3;
      TextView text3 = ViewBindings.findChildViewById(rootView, id);
      if (text3 == null) {
        break missingId;
      }

      id = R.id.text4;
      TextView text4 = ViewBindings.findChildViewById(rootView, id);
      if (text4 == null) {
        break missingId;
      }

      id = R.id.today;
      TextView today = ViewBindings.findChildViewById(rootView, id);
      if (today == null) {
        break missingId;
      }

      id = R.id.today_set;
      FrameLayout todaySet = ViewBindings.findChildViewById(rootView, id);
      if (todaySet == null) {
        break missingId;
      }

      id = R.id.vertical_row;
      View verticalRow = ViewBindings.findChildViewById(rootView, id);
      if (verticalRow == null) {
        break missingId;
      }

      return new FragmentHomeBinding((RelativeLayout) rootView, createIcon, delete, edit,
          editSchedule, nestedScrollView, noSchedule, progress, progressBar, quickTask,
          quickTaskBox, quickTaskRecycler, quickText, recyclerHome, recyclerHome2, repeatIcon,
          repeatTaskBox, repeatTaskRecycler, saveQuickTask, tasksDone, tasksDonePercentage, text3,
          text4, today, todaySet, verticalRow);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
